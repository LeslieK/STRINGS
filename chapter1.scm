(load "srfi-13-local.scm")
(load "Vibrio_cholerae.scm")
(load "Thermotoga-petrophila.scm")
(load "test-check.scm")


(define oriC-Vibrio-cholerae
  (string-append
   "atcaatgatcaacgtaagcttctaagcatgatcaaggtgctcacacagtttatccacaac"
   "ctgagtggatgacatcaagataggtcgttgtatctccttcctctcgtactctcatgacca"
   "cggaaagatgatcaagagaggatgatttcttggccatatcgcaatgaatacttgtgactt"
   "gtgcttccaattgacatcttcagcgccatattgcgctggccaaggtgacggagcgggatt"
   "acgaaagcatgatcatggctgttgttctgtttatcttgttttgactgagacttgttagga"
   "tagacggtttttcatcactgactagccaaagccttactctgcctgacatcgaccgtaaat"
   "tgataatgaatttacatgcttccgcgacgatttacctcttgatcatcgatccgattgaag"
   "atcttcaattgttaattctcttgcctcgactcatagccatgatgagctcttgatcatgtt"
   "tccttaaccctctattttttacggaagaatgatcaagctgctgctcttgatcatcgtttc"
   ))

(define count
  (letrec ((prefix (lambda (ls n)
                     (cond
                       [(zero? n) '()]
                       [(null? ls) '()]
                       [else (cons (car ls) (prefix (cdr ls) (sub1 n)))]))))
    (lambda (str sub)
      (let ((sub-len (string-length sub)))
        (let ((str (string->list str))
              (sub (string->list sub)))
          (let loop ((c 0)
                     (str str))
            (cond
              [(null? str) c]
              [(equal? (prefix str sub-len) sub) (loop (add1 c) (cdr str))]
              [else (loop c (cdr str))])))))))

(define starting-positions
  (letrec ((prefix (lambda (ls n)
                     (cond
                       [(zero? n) '()]
                       [(null? ls) '()]
                       [else (cons (car ls) (prefix (cdr ls) (sub1 n)))]))))
    (lambda (str sub)
      (let ((sub-len (string-length sub)))
        (let ((str (string->list str))
              (sub (string->list sub)))
          (let loop ((i 0)
                     (pos-ls '())
                     (str str))
            (cond
              [(null? str) (reverse pos-ls)]
              [(equal? (prefix str sub-len) sub) (loop (add1 i) (cons i pos-ls) (cdr str))]
              [else (loop (add1 i) pos-ls (cdr str))])))))))

(define subst
  (lambda (msg dict)
    (let ((str (make-string (string-length msg))))
      (let loop ([i 0])
        (cond
          [(= (string-length msg) i) str]
          [(assv (string-ref msg i) dict) =>
           (lambda (pr)
             (string-set! str i (cdr pr))
             (loop (add1 i)))]
          [else (string-set! str i (string-ref msg i))
                (loop (add1 i))])))))

(define n-grams
  (letrec ((prefix (lambda (ls n)
                     (cond
                       [(zero? n) '()]
                       [(null? ls) '()]
                       [else (cons (car ls) (prefix (cdr ls) (sub1 n)))]))))
    (lambda (msg n)
      (let ((ls (string->list msg))
            (alist '()))
        (list-sort
          (lambda (x y)
            (cond
              [(= (cdr x) (cdr y)) (string<? (car x) (car y))]
              [else (> (cdr x) (cdr y))]))
          (let loop ((ls ls) (alist alist))
            (cond
              [(< (length ls) n) alist]
              [else
               (let ((pre (prefix ls n)))
                 (let ((pre-str (list->string pre)))
                   (cond
                     [(assoc pre-str alist) =>
                      (lambda (pr)
                        (set-cdr! pr (add1 (cdr pr)))
                        (loop (cdr ls) alist))]
                     [else (loop (cdr ls) (cons (cons pre-str 1) alist))])))])))))))


(define decimal->base-A-str
  (lambda (n A len)
    (list->string
     (map
      (lambda (n) (integer->char (+ (char->integer #\0) n)))
      (let ((ls
             (let loop ((n n)
                        (A-ls '()))
               (cond
                 [(zero? n) A-ls]
                 [else
                  (loop (quotient n A) (cons (remainder n A) A-ls))]))))
        (append (make-list (- len (length ls)) 0) ls))))))

(define Pr
  (lambda (N A Pattern t)
    (let ((high (expt A N)))
      (let loop ((i 0)
                 (c 0))
        (cond
          [(= i high) (/ c high)]
          [else
           (let ((str (decimal->base-A-str i A N)))
             (cond
               [(>= (count str Pattern) t) (loop (add1 i) (add1 c))]
               [else (loop (add1 i) c)]))])))))

(test "example-1"
  (n-grams "ACAACTATGCATACTATCGGGAACTATCCT" 5)
  '(("ACTAT" . 3) ("AACTA" . 2) ("CTATC" . 2) ("ACAAC" . 1)
    ("ATACT" . 1) ("ATCCT" . 1) ("ATCGG" . 1) ("ATGCA" . 1)
    ("CAACT" . 1) ("CATAC" . 1) ("CGGGA" . 1) ("CTATG" . 1)
    ("GAACT" . 1) ("GCATA" . 1) ("GGAAC" . 1) ("GGGAA" . 1)
    ("TACTA" . 1) ("TATCC" . 1) ("TATCG" . 1) ("TATGC" . 1)
    ("TCGGG" . 1) ("TGCAT" . 1)))

(test "example-2"
  (count "ACAACTATGCATACTATCGGGAACTATCCT" "ACTAT")
  3)

(test "example-3"
  (n-grams "CGATATATCCATAG" 3)
  '(("ATA" . 3) ("TAT" . 2) ("ATC" . 1) ("CAT" . 1) ("CCA" . 1)
    ("CGA" . 1) ("GAT" . 1) ("TAG" . 1) ("TCC" . 1)))

(test "example-4"
  (count "CGATATATCCATAG" "ATA")
  3)

(test "oriC-Vibrio-cholerae-1"
  (let ((k-mers (n-grams oriC-Vibrio-cholerae 9)))
    (list (car k-mers) (cadr k-mers) (caddr k-mers) (cadddr k-mers)))
  '(("atgatcaag" . 3) ("ctcttgatc" . 3) ("cttgatcat" . 3) ("tcttgatca" . 3)))

(test "oriC-Vibrio-cholerae-2"
  (let ((k-mers (n-grams oriC-Vibrio-cholerae 3)))
    (car k-mers))
  '("tga" . 25))

(test "oriC-Vibrio-cholerae-3"
  (let ((k-mers (n-grams oriC-Vibrio-cholerae 4)))
    (car k-mers))
  '("atga" . 12))

(test "oriC-Vibrio-cholerae-b"
  (count oriC-Vibrio-cholerae "tga")
  25)


(test "quiz-1"
  (let ((k-mers (n-grams "ATCCATATTTGTCGTATGTATGTAATTTACGACGTGTATGTAAATCCATAATCCATAATCCATATGTATGTAATGTATGTAATTTACGACGATCCATATGTATGTAAATCCATAATCCATATTTACGACGTTTGTCGTAATCCATATGTATGTAAGGTTTGCGGTTTGCATCCATATGTATGTAATTTGTCGTAATCCATATGTATGTAAATCCATAGGTTTGCATCCATAATCCATATTTGTCGTAATCCATAATCCATATTTGTCGTATTTACGACGTTTACGACGATCCATAATCCATAATCCATATGTATGTAATTTGTCGTATGTATGTAAATCCATATTTGTCGTAGGTTTGCATCCATAATCCATAATCCATATTTACGACGTGTATGTAAATCCATATTTACGACGATCCATATTTGTCGTATTTGTCGTAATCCATAATCCATATTTGTCGTAATCCATATTTGTCGTATTTGTCGTATTTACGACGGGTTTGCTTTACGACGTTTGTCGTAGGTTTGCTTTACGACGTGTATGTAAATCCATATTTACGACGATCCATAGGTTTGCTTTGTCGTATTTACGACGTTTGTCGTATGTATGTAAATCCATATGTATGTAATTTACGACGATCCATAATCCATATTTACGACGGGTTTGCTTTACGACGTTTGTCGTAATCCATAATCCATATTTGTCGTATTTGTCGTAGGTTTGCGGTTTGCATCCATATTTGTCGTATTTGTCGTAATCCATATTTGTCGTAATCCATAGGTTTGCTTTGTCGTAGGTTTGCTTTGTCGTAGGTTTGCTTTACGACGGGTTTGCATCCATATTTGTCGTATTTGTCGTAGGTTTGCGGTTTGCGGTTTGCTTTGTCGTATGTATGTAAGGTTTGCTTTACGACGGGTTTGCTTTGTCGTATTTACGACGTGTATGTAATGTATGTAA" 13)))
    (cons (car k-mers) (cons (cadr k-mers) '())))
  '(("ATCCATAATCCAT" . 12) ("TCCATAATCCATA" . 12)))


(test "decimal->base-A-str-1"
  (decimal->base-A-str 3 2 25)
  "0000000000000000000000011")

(test "Pr-1"
  (Pr 4 2 "01" 1)
  11/16)

(test "Pr-2"
  (Pr 4 2 "11" 1)
  1/2)

(test "Pr-3"
  (Pr 4 2 "01" 2)
  1/16)

(test "Pr-4"
  (Pr 4 2 "11" 2)
  3/16)

(test "starting-positions-1"
  (starting-positions "GATATATGCATATACTT" "ATAT")
  '(1 3 9))

(test "starting-positions-2"
  (starting-positions
   "CCGAACACCCGTACACCGAACACCACACCACACCTTGCACACCACACCTACACCACACACCACACCGGACACCCACACCCACACCACGAACACCGAGAGTACACCTACACCTGACACCGGGGATCGTCACACCAAGTGGTGATACACCCACACCCTTTACACCTACACCACACCCGTACACCCTGAACACCACACCTAGAGAGTTGCACACCTCACACCGAAGGCACACCACACCATCCACACCATAAACACCGTTAACACCGTAGAACACCCAGCACACCCTTACCGCATACACCGACGTTAGACACCCACACCGGCAGTCACACCGTACACCCATTCGGTCCACACCCTACACCGCCTGCCACACCTACTGAGTTACACCGCATGACACCATTATCCGAACACACCAATATACACCAACACCATACACCATTTAACACCCCAAAACACCGACACCGACACCGCAAGCCCACACCACACCCACACCACAGACACCTACACCGTTTAGACACCAACACCGACACCACACCCCACACCCAAGACACCGCTACACCCTGCTGGACACCGACACCTACACCTCACACCGGACACCGCACACACCGCCACACCAATCACACCACACCACACCAGTACAACACCGACACCTACACCACACCACACCCAGATACACCCACACCGGACACCACACCAAACACCATTACACCCACACCGGTACACCACACCTCGTACACCAAGTAGACACCCAACACACCACACCTTGATGACACCTGACACCATACACCAAACACCACACCGAGGTAGACACCACACCGCCATCGACCACACCCTGACACCATACACCACACCACACCTAGTCGACACCCACACCCTCACACCTGACACCCGCGGCATACACCCACACCACTTACACCTACACCGGGGGAAACACCGAAACACCTCAACACCGGACACCACACCTAAGACACCGGGCGATACACCTGACCCTGACACCACACCACACCCAACACCCGAACACCACACCCAAACCTTGACACCCACACCAAAACACCCTTTATTAAAACACCCCGACCACCAAACACCACACCCCACACCGAACACCCACACCGCATACACCGGTCACACCTTATCTCGCCCACACCCTACACCCCACACCACACCACACCACACCGTACCACACCACACCCCCACACCAAAACACCACACCACACCGGTTACACCCCACACCAACACCCACACCATTACACCTACACCGCAACACCTGCACACCACACCAAGACTGGAGACACCTACCACACCCTCGTTTACACCACCTGACACCTTACACCTCCGACACCAAAAACCCGTTGGGTCATCGGATCAGGACACCTTTACACCACACCTTCGAGGACACCACGGACACCACACCCCACACCACACCGGTACACCGCGTTCACACCTCACACCGACACCACACCCCCTGAACTGTATACACCACACCACACCAACCCAACACCCTAGAAGACACCTGCCACACCTTACACCACACCACCGACACCAACACCCAAACACCTTTGACACACCACACCAACACCGTACACCGCAACACCCGCATTACACCTTACACCACACCACACCCCCCTACACCCACACCACACCCTCGGACACCAGTACACCACACCACAGATAGACACCATACACCTTACACCACATACACCTTTCACACCACACCCACACCCCGCTTAGACACCGACACCACACCACACCTGACACCACACCTCGCACACCGCCCTTACACCACACCCCAGCAGAAAACGAACACCCACACCACACCACACACCACACCACACCACACCGACACCTGACACCTAAACACCCCCACACCACACCTCTCCAACACCACACCAACACCTACACCAGAAAGACACCGACACCCGACACCCGCTGTTGTACACCCACACCATCGACACCACACCACACCACACCCTACACCGGCACACCATGCAAACACCACACACCTGGACACCCACACCACACCGCACACCACACCACACCTACACCACCGACACCACACCACACACCTACTCCACAACACCTACACCAAACACCCTACACCTACACCTACACCTACATACACCTACACCTAATATTATGGACACCACACCTTCAGACACCGTACACCACACACCCTATGTTACACCACAGGCAGAATTTGACACCTCACACCCACACCCACACCCGCACACCACACCAACACCACACCACACCCCCAACACCGCTCTTACACCTTACACCGACACCAACACCGACACCGACACCACACCCCAATATCCCTCACACCACACCTAACCAGTATACACCGTTGACAACACCCCAATTTACACCCCATACACCTCAGACCACACACCGGACGGGCAACACCTACACCGATGTTACTTTACACCGGGCTCGCGGACACCACTCGACACCAACACCCGACACCTTACACCACACCAGCTGCGTGAACACCTACACCATCCCAACACCACACCGACACCGTATGGACACCTACACCTCGAGAGTTCCGCTAGAACACCACACCCATACACCATACACCGCGTACACCGAACACCGACACCCACACCACACCCAATGACACCGATGACACCGGCTCGATACACCTACACCGAACACCATCAGACACCGCGTACACCCAACACCTGACACCAACACCGCGGCACACCTAGTGACACCTACACCTACACCACACCATACACCCTACACCGATGAACACCAACACCACTCTAAACACCCAGGACACCAACACACCTAGACACCACACCAACGACAGAGACACCCTACACCTGCCAAGCTTTACACCATTGGTGAATCACACACCACACCAACACCACACCACACCGCTTACACCCGACCCGAAAACACCCACACCACACCAACACCACACCACATTACTCCCGTTACACCTACACCAACACCACACCTTTACACCACACCCAGCAACACCACACCAAATGGACACCACACCACACCACACCTTAGCCGATGTGCCGACACCGCTGTCGTCACACCAGTGACACCTTAGCGTACACACCACACCCAACACCTACACCACACCCGAAACACCTGACACCACACCACACCACACCCTACACCACACCATGACCACACACCAGCCGACACCACACCATACACCTACACCGAAACACCTTTCTACACCACACCACACCTGAACACCTAGTCACACCACGACACCAACACCTGACCACACCGGGGGACACCTTTGGAACGACACCTAACACCGCCACACCACACCACACCCGACACCTATAACACCACACCACACCACACCAAAGGCACACCTTAACACCCACACCAAGGGCTACACCACACCACACCTCCAAAACAAGGGACACCACACCCAACACCACACCACACCGCGTGGACACCACACCTTGACACCAAATTGTGCACACCACACCTGCACACCTTAAGAACGACACCGTCAGTACACCGAAACCCTATGACACCTGGGACACCTGGCACACCAACTACACCACACCCACACCACACACCTGGACACCGTTTCGCGAGTGTGGGTTGCTTGACACCACACCACACCGCGGCCTTACACCGCACACCGTAAACACCGTTGACACCTCATTACTCGACACCACACCGCACACCCACACCCGACACCGAACACCACACCTGGGCATACACACCACACCGTACACCTACACCACACCTGTGCTACACCAGGGGTACACCACACCTAGTACACCACACCGATACACCCACACCACACCACACCCACCAACACCACACCATCAAGAACACCCTATACACCCACACCACACCTACACCACACCCTACACCACACCACACCACACCATCGACACCTACACCACACCAACACCACACCAAACACCACACCCACACCCGGACACCACACCCACACCACACCATAACACCTAACACCACACACCTACACCTACTCTGCTAAACACCCAACACCTCTACACCCTGCCGACACCGCGACACCGGCGACACCCTGTTACACCACACCTCACACCTTCGACACCAGCCAGAGACACCGGACACCGACACCCCGAACACCAACACACCCGA"
   "ACACCA")
  '(19 24 38 49 56 80 128 164 186 225 230 239 387 403 413 419 426 471 482 508 520 604 613 618 623 646 651 679 684 691 713 727 747 770 777 784 801 829 836 841 897 947 986 991 1011 1036 1075 1148 1153 1158 1173 1186 1194 1199 1220 1232 1262 1267 1303 1329 1369 1386 1395 1407 1444 1467 1472 1477 1516 1521 1530 1555 1560 1599 1604 1625 1640 1648 1653 1666 1680 1698 1728 1733 1745 1770 1800 1805 1812 1817 1822 1856 1872 1877 1889 1933 1942 1947 1952 1972 1983 2004 2016 2021 2032 2041 2046 2073 2131 2153 2172 2218 2223 2229 2234 2272 2290 2312 2430 2440 2460 2465 2486 2497 2547 2560 2595 2645 2678 2716 2721 2745 2751 2772 2788 2793 2831 2849 2854 2860 2865 2900 2905 2911 2916 2941 2947 2960 2975 2980 2991 2996 3001 3040 3063 3081 3102 3107 3112 3124 3129 3142 3152 3157 3188 3193 3216 3224 3279 3284 3305 3310 3315 3320 3345 3357 3362 3385 3397 3402 3418 3431 3445 3517 3526 3537 3580 3585 3643 3675 3694 3712 3728 3739 3753 3772 3777 3792 3797 3824 3835 3847 3852 3857 3862 3877 3882 3888 3893 3900 3919 3930 3935 3950 4032 4053 4088))

(test "starting-positions-quiz"
  (starting-positions
   "AGACCCGACGACCCGAGACCCGAGACCCGATGACCCGATCATGAGACCCGAGGACCCGAGCGTAATCGACCCGAACGCCGGACCCGAAGGGACCGACGTCGACCCGACGACCCGAGACCCGAGTACGACCCGATCATTGGACCCGAGTGACCCGATGGCGACCCGATCTACTACGACCCGATGGCGGACCCGATGTGCGACCCGATCGACCCGACTGGGACCCGAACAGACCCGAGGTGACCCGAGACCCGACTGACCCGAGACCCGATGACCCGACAGACCCGAACCCAGACCCGAGCGGACCCGACGACCCGAAGCGGGACCCGACATGACCCGATGACCCGATACCCTTGCGCGGACCCGACGACCCGAGACCCGATGACCCGAGCGTTATGACCCGAAAGACCCGAGTGACCCGACGGACCCGAGGACCCGACTCCGACCCGATGTGACCCGAGCGACCCGAATGGACCCGAGTGACCCGAGACCCGATGACCCGAAGACCCGAGTGGCAGACCCGAAGACCCGAAGTCCCTCGACCCGAGACCCGACTCTCAGACCCGATGCCGACCCGAGACCCGATGGCTTGACCCGAGATGCAGACCCGAGACCCGAGGACCCGAGACCCGAGCATGGGGGGACCCGACCGACCCGAGGACCCGAGACCCGATTGGACCCGATGACCCGAGACCCGAAGACCCGAAGGGACCCGAAGCTTGACCCGATGACCCGACGCGGACCCGAACCTTGACCCGAATATCGAGGAGACCCGAGACCCGAGGACCCGAGACGGCATGGACCCGAGACCCGAGACCCGAGAGACCCGATTGTGACCCGAATGACCCGAGACCCGATTCTGCGATAGGACCCGAGGACCCGATAGACCCGACGGACCCGATGCACTAGACCCGAGACCCGATCGGGCGTGATTGGACCCGAGACCCGAGACCCGACCGACCCGAGACCCGAGACCCGACCGACCCGAGTAGCCTTGACCCGATGGGGAGACCCGAGGACCCGAATGACCCGATGACCCGACGGCGGACCCGACGACCCGACAAGAATCGACCCGACGGACCCGATCACTCGACCCGAGACCCGACAAATATACGACCCGAACATGACCCGACAGACCCGATTGACCCGAACGGACCCGAGACCCGACGTATCGACCCGAGTGACCCGATCAGACCCGAGACCCGAGAATTGGACCCGACTCTGACCCGAGACCCGAGACCCGAACATATACGACCCGACGACCCGAGACCCGAAGACGACCCGAATATCGTTCAGACCCGAAAGACCCGACTGACCCGAGCATTGACCCGAGACCCGACGGACCCGACATCATGACCCGACCGACCCGAGACCCGATTCTGACTTATCGACCCGACGACCCGAGGACCCGAGGACCCGATATCCCCTGACCCGAGACCCGATCGACCCGATCGACCCGAAGACCCGAACCCAGCATCGACCCGAGACCCGAGACCCGAGCTTCAGGACCCGAGACCCGATCTGTAAGACCCGATCAGAACGACCCGAAGGACCCGAAAGGGACCCGAAGGATAGACCCGAGCTTGGACCCGAGACCCGATGGACCCGAGACCCGAACCTAAAAGGACCCGAAGATGTCGACCCGAGTGTGACCCGAAAGACCCGAACTATTAAGACCCGAGGGTGCGGACCCGAAACTGGACCCGAGACCCGAAGAGACCCGAGCTTTACTGACCCGAACGACCCGACTGACCCGAGACCCGACGAACCTACCGACCCGAGATGGGACCCGATAACTTGGACCCGAGACGACCCGAATGGACCCGACCCCCCGACGACCCGAGGTGTTCAGGGCGTTATGCCCGACCCGATGTGCGTCCAGACCCGAGACCCGATGCGACCCGAGCAGCCGACCCGATGCCGACCCGATGACCCGAAAATGACCCGAAACGACCCGAAGGACTTGACCCGAGACCCGATAGACCCGAACGACCCGAGGCGGAGGGACCCGACGACCCGAGTGCAGATCGACCCGACGACCCGAGACCCGAAGACCCGACGACCCGAATGACCCGAAGACCCGATAAGACCCGAGCAGACCCGAGACCCGATCAGACCCGAACCTCGACCCGACTGACCCGACAGACCCGAGACCCGAGGACCCGAGACCCGAGACCCGATGACCCGAGGCCGACCCGAGGACCCGAAGCACGACCCGAGCGACCCGACTTAGGCTGCGGACCCGACGACCCGAGACCCGAAGAGGACCCGACGGGACCCGACGACCCGATGGACCCGATCTAGACCCGAGACCCGAGCTGGACCCGAAGACCCGAAGACGACCCGAGGACCCGACATTGTAAGGGACCCGAGACCCGAGACCCGAGACCCGAGACCCGACCTTCAAGACACGCAGACCCGAGGACCCGATGGACCCGACGGAGACCCGATCGAATCGACCCGAGACCCGATGACCCGATACTGACCCGACCAAGACCCGAAATACGACCCGATGGACCCGATGGACCCGATGACCCGAGACCCGAGTGGACCCGAGACCCGAGACTGCTGGAGACCCGAGGCAGACACGTAAGACCCGAGGCTGACCCGATAGACCCGAAGCCGACCCGAGACCCGACCAGACCCGAGACCCGAGACCCGAGACCCGAGGCGACCCGACCGGACCCGATTATGACTCGACCCGACGACCCGAGACCCGAGCTAAAGACCCGACGTTCCAATGACCCGAGACCCGAGGCACTTTCCTCGTGACCCGAGACCCGAAGACCCGATGACCCGACGACCCGACGACCCGAGGACCCGACACAGGACCCGAGGGACCCGAAAGAAAACGATGGACCCGAGACCCGAATTGGCATGACCCGAAAAATTAGGACCCGACCCAAGACCCGAGACCCGATGCTTCGACCCGAAAGGACCCGAGACCCGAGACCCGACCGACCCGACGACCCGAGATCTCATAGACCCGAGTGACCCGAGACCCGAGACCCGAAAGACCCGACGAAGCGACCCGAGACCCGAGACCCGAATTGGAGACCCGAATGGACCCGAAGACCCGACATTTGGCTGACCCGAATGACCCGAGACCCGACCGAAGGCGACCCGACTGACCCGAGACCCGATCTGCCGACCCGAGACCCGATTGGACCCGAGACCCGACGGACCGACCCGATGTCCCGGACCCGATAGCGACCCGAGACCCGAGCTCTAGACCCGAGTCGACCCGAGCGGACGGTCACGGCGACCCGAATCGACCCGATTGCAGACCCGAACTACTTGGACCCGATTCAAGGCGGGAGTCCTAGGACCCGATAGGACTGATTATGTTAAATGACCCGATCGACCCGACGTAAGACCCGAGACCCGAGCCGGACCCGAAAAGACCCGAATGACCCGAGCGACCCGAGACCCGATGACCCGAGACCCGAATGGTTTGACCCGACTGACCCGATAGACCCGAACCCGACCCGAGAGGACCCGAGGACCCGAGACCCGATGGGACCCGATGATAGTTGACCCGACGGACCCGAGACCCGACGGACCCGAGACCCGATGGTGATGGCCGGCGACCCGAGACCCGAGACCCGAGACCCGATGCAGACCCGAAAGACCCGAGACCCGAGACCCGAGCCAGACCCGAGCGACCCGAATTAACAGACCCGATAGACCGACCCGAATGACCCGAAGACCCGAGACCCGAGACCCGAGGACCCGATGACCCGAATGACCCGAAGACCCGAGACCCGAATTGACCCGAAGACCCGATGGACCCGACGTGACCCGAGACCCGAGACCCGAAGACCCGAGACCCGATCCGTCAAGACCCGAAAGACCCGACCGGGAGGACCCGATGACCCGAGACCCGAAGTGACCCGAGGTGACCCGAAAGACCCGAGGCAGACCCGACGACCCGAAGTAGACCCGAGACCCGAAGACCCGAGACCCGATTGACCCGATCACGACCCGAATTTAGACCCGACTCGGGACCCGAACATGACCCGAAAGACCCGAATCCCAATCGACCCGAGACCCGAGACCCGAAGATTCGACCCGAGACCCGATAGTGCTGGACCCGAGACCCGAGTTCGCCTTTTGACCCGAGACCCGAGACCCGAGACCGCCGGGGACCCGAACTGACCCGAACTAAGCAGACCCGAGGACCCGATAGACCCGAGAGGACCCGAGGGACCCGATTTATGACCCGAGACCCGAGACCCGAGGTGACCCGAATAGACCCGAGGACCCGACGACCCGAGACCCGATGGACCCGACATGACCCGAAGACCCGAATTGAACAGGAAGACCCGAGACCCGACGGACCCGAGACCCGAGACCCGATGTCGACCCGACCGACCCGAGGACCCGATGGTCGACCCGAGACCCGACCGACCCGAGACCCGATGACCCGACCGCGACCCGAGGACCCGAGACCCGAAGAGACCCGAGACCCGACTACTTGGACCCGACGCGACCCGATAATGGCTGACCCGACATGCGACCCGAGACCCGAAGACCCGAAGGTAGACCCGAGACCCGACTGACCCGAGCAGAGGCGAGACCCGATGGTCCTGACCCGAGGACCCGAATCTAGGACCCGAGACCCGAATCATCGACCCGATACGGACCCGAGACCCGAATTAGACCCGAGACCCGAAGACCCGAAGACCCGATGACCCGACAAAAGAGACCCGAGACCCGAGACCCGATCGGACCCGAGACCCGATAAGACCCGAGACCCGAGACCCGAATTGACCCGACGACCCGAGATGACCCGACTGACCCGACGACCCGACGACCCGAGCAAGACCCGACGACCCGAGCTATCTTCTTTTGGACCCGAGACCCGATGGACCCGACGACCCGATAGGACCCGAGACCCGAGGACCCGAATAGGAGCGACCCGACTCGGACCCGATTGCTCTTGACCCGAACTCCTTCGACCCGAGACCCGAGGGGAGACCCGAACGACCCGATAGACCCGAGACCCGAAGCTCAAACCGACCCGACAGGACCCGAGACCCGACGGACCCGAGGACCCGAGACCCGACTGACCCGACAAGAGACCCGATAGGCTTCGACCCGAAAAATAGACCCGAAGACCCGACGTCGGACCCGATTGACCCGAGACCCGAACGGAGACCCGAGACCCGAGACCCGAGGGGCGACCCGACGTAGACCCGAGGCCTAATCGACCCGAGACCCGAACGACCCGATAGGACCCGAGCTGACCCGACCAACTGACCCGACTCGACCCGACGACCCGACTGACTTCCCAGACCCGAGACCCGAAAACCGCGCGACCCGACTTGGACCCGAGAGGACCCGACCGACCCGAGCAGACCCGATGACCCGAGAGACCCGATGACCCGAAGTAAAAGGACCCGATAGACCCGATGACCCGAGACCCGAATGCCGAGGACCCGATAGTTCCGACCCGAGACCCGAACAGACCCGAGACCCGACGACCCGATTCAAGACCCGACCGACCCGAAGACCCGAACTCGACCTGACCCGAGACCCGACGACCCGAGACCCGAGACCCGAGCTGGGACCCGAACATCGAGTGGACCCGAGACCCGACGACCCGAGTAATTGACCCGACACTGGGCTATGACGACCCGAGAGTAGGGACCCGAGACCCGAGACCCGAGACCCGAGGCAAAGACCCGAGACCCGAAGAAAGGGACCCGACCCGTGTGACCCGAGTCCGACCCGAAGACCCGAGACCCGACGACCCGAGGACCCGAAGAATGACAGATTCTGCAGGACCCGAAGACCCGAGACCCGACCTCGACCCGAGACCCGAAGGACCCGAGTTGGGATTCGGCTTAGACCCGATCGGGACCCGAGACCCGAGACCCGAGACCCGATACAGACCCGAGGACCCGATGACCCGACTTGACCCGACGACCCGAAGACCCGAACTGGACCCGATTCTTACCAAAGACCCGAAGACCCGAAGACGGCAACGACCCGACCGACCCGAGTTGACCCGAGTAAGACCCGATGGACCCGACGACCCGAGGACCCGAAAATTATGACCCGACGTGACCCGAGGACCCGAAATTGACCCGAAGACCCGAATTGACCCGAGTATCGTACCGACCCGAGACCCGACAGTGAGTGACCCGAGACCCGAAGACCCGAAGACCCGATGGAGGGTCGACCCGACGACCCGAGCCAGACCCGATGCTTGACCCGACGACCCGATCTAGACCCGACATGACCCGAGACCCGAGAGACCCGAGACCCGAGACCCGACACTCGACCCGATCGACCCGACCAGACCCGAGACCCGAATATGACCCGAAGACCCGAAACGACCCGAATTTCAAGGCGGACCCGAGACCCGAACGGACCCGAGACCCGAGACCCGAGAGTAGCGGGACTTGGACCCGAGACCCGAGTCCCGTCGACCCGATGACCCGAGACCCGAGTTCGACCCGACTGGTGACCCGAGACCCGAAGACCCGAACCGGCTGAGACCCGAGGACCCGACAGGAGACCCGAGACCCGAGGACCCGACTCCCTCCTGGTGACCCGATAAAATGACCCGAGACCCGAAGGACCCGAAGGACCCGAGGACCCGAGACCCGATGACCCGAGACCCGAGCTCGGACCCGAACTGACCCGAGACCCGACATGACCCGAGGACCCGATCGACCCGATAAGGTATTACGTTCGACCCGATGACCCGATGGGACCCGAACAGACCCGAGACCCGAGTGGAATTAGGGACCCGACTGCGGGGCTGACCCGAGCGGACCCGAAGTGACCCGAGACCCGAGGTAGACCCGAGACCCGATACCCTGCAAGACCCGAAGAGACCCGACGTTGGACCCGAGACCCGAGCGGGTGGGACCCGACTGCTGACTACGACCCGAGACCCGAAAAAATGACCCGACTCAGTCGATAGACCCGAGACCCGAGGACCCGAGACCCGAGACCCGAGACCCGAGACCCGAAACGACCCGACTAACTTTCATCCTTAATTAGACCCGAGACCCGACGGACCCGAGACCCGATCAAGTGACCCGATAGACCCGACGACCCGAGACCCGACCCGGACCCGAAGACCCGACGCTAAGACCCGACAGACCCGAGACCCGAGGACCCGACCGCTTTGGGCTGACCCGAAATCCAGACCCGAGCGACCCGATGGACCCGAGACCCGACACGACCCGAAGACCCGAGCGACCCGAAAGACCCGAACCGACCCGACGACCCGAGACCCGAGACCCGAGTTCGGACCCGACGACCCGAGACCCGACTCGCTAGACCCGATTCTAATTTTTGACCCGAGACCCGACGACCCGAGACCCGAACGACCCGAGACCCGAGGACCCGAAAGTGTCCTGACCCGAGACCCGAAACGACCCGAGTGAGGACCCGATATGTCCTGCCCGGACCCGAGTAGCGGGAGACCCGAGACCCGACGCAGACCCGAGACCCGAAGCGTTGGACCCGATAATTGGACCCGAGACCCGATTACTCGGACCCGAAGGACCCGAAGACCCGAAAGGACCCGAGACCCGAAAGACCCGACCAGATTCACGACCCGATGACCCGAGGACCCGACGACCCGAGCAGATCAGACCCGAGACCCGATTAGAGACCCGATGGACCCGAGACCCGATCGACCCGAAGAGACCCGAGCGACCCGATCCTATTGAGACCCGAAGACCCGAGAATAAGACCCGAAGACCCGATTGTGACCCGAGACCCGAAACAGGCGACCCGAGACCCGAGACCCGATGACCCGAGACCCGAGACCCGATATAGACCCGAGCGACCCGAAGCAGACCCGAGGGACCCGATGACCCGAGGACCCGAGACCCGAGAGGGACCCGAGACCCGAGACCCGATATGAGACCCGAGACCCGACCGGTATAGGACCGAGACCCGACGACCCGAGACCCGACGACCCGAGAGACCCGATTGACCCGATGACCCGAGACCCGAGACCCGAGGAGGGGGACCCGATCGGACCCGAGACCCGAGAGCCGACCCGAAACATTGACCCGAGACCCGAAGACCCGAGACCCGAGCCTTCCGGACCCGAGACCCGAGACCCGACAGACCCGAAGACCCGATCATAGAGACCCGACGGACCCGAGACCCGAAGCGACCCGAGACCCGAGACCCGAAGACCCGAGACCCGAGACCCGAGACCCGAGGAGACGTAGCAGACCCGACTCGCGACCCGAAGACCCGAGCGTGGACCCGAGACTGACCCGAGACCCGAGACCCGAAGGTAGACCCGACCTTGAGTGATAGCTGACCCGACTGAGGACCCGACTGACCCGATTGGACCCGAATGACCCGAGTCTCCCGGACCCGATCTTTTCAAGGACCCGAAGACCCGATCGTCGACCCGAATGGTGCTCGGCAGATGACCCGAGACCCGAAGGACCCGACTATACGGACCCGACGACCCGAAGACCCGATGGACCCGAAGGTTACGGACCCGAGACCCGATTGGTGACCCGAGGAGTGCAGACCCGACCTACGAGCCAGAACTTCGACCCGAGATCCCGACCCGACCTGACCCGACGACCCGAGCGCAGACCCGACTTAGACCCGATGACCCGAAGACCCGAAGGACCCGAGGACCCGAGACCCGACAGACCCGATAGACCCGAGACCCGATTGACCCGAAGACCCGACGACCCGAGACCCGACCAATATGACCCGAGTTAGCTCGGGACCCGATTTAGGACCCGAGACCCGAACGGGGACCCGATCATGACCCGACGACCCGAGCAAGACCCGAACAGTGACCCGAATGACCCGAACGGACCCGAGACCCGACAAGACCCGAGACGACCCGACCGCGAACTATAGACCCGAAGTGACCCGAATGACCCGAGGAGCCGACCCGAGGACCCGACCTT"
   "GACCCGAGA")
  '(9 16 108 238 254 365 478 537 568 588 601 616 656 681 766 781 797 804 811 840 905 932 939 955 962 1088 1150 1189 1196 1220 1227 1257 1322 1360 1425 1475 1482 1503 1583 1599 1697 1747 1771 1797 1878 1962 2034 2094 2141 2156 2163 2244 2300 2362 2369 2376 2383 2454 2529 2546 2553 2621 2638 2645 2652 2703 2739 2767 2854 2903 2933 2940 2964 2989 2996 3025 3032 3095 3126 3146 3163 3208 3371 3417 3432 3482 3500 3541 3557 3585 3592 3599 3626 3633 3704 3711 3751 3795 3802 3817 3870 3936 3951 4038 4045 4065 4087 4112 4119 4126 4185 4216 4223 4266 4319 4335 4342 4389 4405 4439 4456 4514 4541 4609 4640 4658 4703 4710 4727 4744 4751 4776 4851 4885 4956 4993 5027 5051 5136 5155 5162 5208 5293 5327 5364 5413 5449 5466 5526 5541 5548 5584 5633 5647 5654 5661 5681 5735 5792 5810 5860 5867 5874 6121 6143 6242 6249 6258 6265 6303 6357 6374 6381 6388 6410 6440 6470 6521 6568 6601 6616 6645 6729 6791 6809 6855 6895 6933 6948 6955 6962 6969 7013 7029 7066 7114 7179 7240 7247 7274 7313 7328 7344 7375 7440 7458 7492 7540 7612 7640 7699 7731 7752 7759 7774 7781 7844 7851 7862 7869 7888 7925 7940 7966 7973 8004 8011 8036 8051 8073 8080 8127 8144 8151 8166 8173 8180 8238 8249 8256 8412 8482 8541 8628 8653 8685 8735 8815 8832))

(test "starting-positions-Vibrio-cholerea-1"
  (starting-positions Vibrio-cholerea-str "CTTGATCAT")
  '(60039 98409 129189 152283 152354 152411 163207 197028 200160 357976 376771 392723 532935 600085 622755 1065555))

(test "starting-positions-Vibrio-cholerea-2"
  (starting-positions Vibrio-cholerea-str "ATGATCAAG")
  '(116556 149355 151913 152013 152394 186189 194276 200076 224527 307692 479770 610980 653338 679985 768828 878903 985368))

(test "starting-positions-Thermotoga-petrophila-1"
  (starting-positions Thermotoga-petrophila-str "CTTGATCAT")
  '(147883 249212 450238 521076 800991 1604405 1765807))

(test "starting-positions-Thermotoga-petrophila-2"
  (starting-positions
   (string-append
    "AACTCTATACCTCCTTTTTGTCGAATTTGTGTGATTTATAGAGAAAATCTTATTAACTGA"
    "AACTAAAATGGTAGGTTTGGTGGTAGGTTTTGTGTACATTTTGTAGTATCTGATTTTTAA"
    "TTACATACCGTATATTGTATTAAATTGACGAACAATTGCATGGAATTGAATATATGCAAA"
    "ACAAACCTACCACCAAACTCTGTATTGACCATTTTAGGACAACTTCAGGGTGGTAGGTTT"
    "CTGAAGCTCTCATCAATAGACTATTTTAGTCTTTACAAACAATATTACCGTTCAGATTCA"
    "AGATTCTACAACGCTGTTTTAATGGGCGTTGCAGAAAACTTACCACCTAAAATCCAGTAT"
    "CCAAGCCGATTTCAGAGAAACCTACCACTTACCTACCACTTACCTACCACCCGGGTGGTA"
    "AGTTGCAGACATTATTAAAAACCTCATCAGAAGCTTGTTCAAAAATTTCAATACTCGAAA"
    "CCTACCACCTGCGTCCCCTATTATTTACTACTACTAATAATAGCAGTATAATTGATCTGA")
   "CTTGATCAT")
  '())






#!eof

(test "Pr-quiz-1"
  (Pr 25 2 "01" 1)
  '16777203/16777216)

(test "Pr-quiz-2"
  (exact->inexact 16777203/16777216)
  0.9999992251396179)


